
#some functions for generation useful stuff (internal use)

#generate cmake variables for library
#Function generates file with library specific cmake variables
#A variable ${name}_LIBRARIES will be created.
#syntax: reguster_library_bin library_name bin1 bin2 bin3 ...
function(generate_variables name)

    #convert to uppercase
    string(TOUPPER ${name} UP_NAME)

    #generate file with cmake variables
    add_custom_command(OUTPUT ${CMAKE_SOURCE_DIR}/scripts/tmp/${name}
                       COMMAND echo 'set(${UP_NAME}_LIBRARIES ${ARGN})' > ${CMAKE_SOURCE_DIR}/scripts/tmp/${name}
                       DEPENDS ${CMAKE_SOURCE_DIR}/scripts/CMakeLists.txt)   #depends on this file

    add_custom_target(variables_${name} DEPENDS ${CMAKE_SOURCE_DIR}/scripts/tmp/${name})

    add_dependencies(libraries.cmake variables_${name})

endfunction(generate_variables)


#gather and connect all generated files with cmake variables
function(generate_variables_file)

    add_custom_target(libraries.cmake
                      COMMAND cat "${CMAKE_SOURCE_DIR}/scripts/tmp/*" > ${CMAKE_SOURCE_DIR}/libraries.cmake
                      )

    #libraries.cmake is an autogenerated file, connect it to proper target
    add_dependencies(autogenerated libraries.cmake)

endfunction(generate_variables_file)


#functions providing platform independed stuff

function(turnOnCpp11 target)
    if(CMAKE_COMPILER_IS_GNUCXX)
        set_target_properties(${target} PROPERTIES COMPILE_FLAGS "--std=c++11")
    elseif(MSVC90)

    endif(CMAKE_COMPILER_IS_GNUCXX)
endfunction(turnOnCpp11)


function(turnOnIntelSyntax target)
    if(CMAKE_COMPILER_IS_GNUCXX)
        set_target_properties(${target} PROPERTIES COMPILE_FLAGS "-masm=intel")
    elseif(MSVC90)

    endif(CMAKE_COMPILER_IS_GNUCXX)
endfunction(turnOnIntelSyntax)
