<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head>
   <title> [CMake] How to make a ProjectConfig.cmake
   </title>
   <link rel="Index" href="http://www.cmake.org/pipermail/cmake/2011-January/index.html">
   <link rel="made" href="mailto:cmake%40cmake.org?Subject=Re%3A%20%5BCMake%5D%20How%20to%20make%20a%20ProjectConfig.cmake&amp;In-Reply-To=%3C201101201822.32753.a.neundorf-work%40gmx.net%3E">
   <meta name="robots" content="index,nofollow">
   <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
   <link rel="Previous" href="http://www.cmake.org/pipermail/cmake/2011-January/042190.html">
   <link rel="Next" href="http://www.cmake.org/pipermail/cmake/2011-January/042204.html">
 </head>
 <body bgcolor="#ffffff">
   <h1>[CMake] How to make a ProjectConfig.cmake</h1>
    <b>Alexander Neundorf</b> 
    <a href="mailto:cmake%40cmake.org?Subject=Re%3A%20%5BCMake%5D%20How%20to%20make%20a%20ProjectConfig.cmake&amp;In-Reply-To=%3C201101201822.32753.a.neundorf-work%40gmx.net%3E" title="[CMake] How to make a ProjectConfig.cmake">a.neundorf-work at gmx.net
       </a><br>
    <i>Thu Jan 20 12:22:32 EST 2011</i>
    <p></p><ul>
        <li>Previous message: <a href="http://www.cmake.org/pipermail/cmake/2011-January/042190.html">[CMake] How to make a ProjectConfig.cmake
</a></li>
        <li>Next message: <a href="http://www.cmake.org/pipermail/cmake/2011-January/042204.html">[CMake] How to make a ProjectConfig.cmake
</a></li>
         <li> <b>Messages sorted by:</b> 
              <a href="http://www.cmake.org/pipermail/cmake/2011-January/date.html#42193">[ date ]</a>
              <a href="http://www.cmake.org/pipermail/cmake/2011-January/thread.html#42193">[ thread ]</a>
              <a href="http://www.cmake.org/pipermail/cmake/2011-January/subject.html#42193">[ subject ]</a>
              <a href="http://www.cmake.org/pipermail/cmake/2011-January/author.html#42193">[ author ]</a>
         </li>
       </ul>
    <hr>  
<!--beginarticle-->
<pre>On Thursday 20 January 2011, Michael Wild wrote:
&gt;<i> On 01/19/2011 07:24 PM, Alexander Neundorf wrote:
</i>&gt;<i> &gt; On Thursday 30 December 2010, Michael Wild wrote:
</i>&gt;<i> &gt;&gt; On 12/30/2010 11:33 AM, Ian Monroe wrote:
</i>&gt;<i> &gt;&gt;&gt; To create my QyotoConfig.cmake I need to know the full path of a
</i>&gt;<i> &gt;&gt;&gt; library so that I can set a variable like QYOTO_LIBRARY.
</i>&gt;<i> &gt;&gt;&gt;
</i>&gt;<i> &gt;&gt;&gt; This is pretty standard requirement right? Its what we're supposed to
</i>&gt;<i> &gt;&gt;&gt; do in *Config.cmake's?
</i>&gt;<i> &gt;&gt;&gt;
</i>&gt;<i> &gt;&gt;&gt; So anyways, how do I that? The only target property that hasn't
</i>&gt;<i> &gt;&gt;&gt; returned NOTFOUND is LOCATION, which unhelpfully returns the location
</i>&gt;<i> &gt;&gt;&gt; of the library in the build directory. I could parse this to get the
</i>&gt;<i> &gt;&gt;&gt; file name, and then append it to the library install location... but
</i>&gt;<i> &gt;&gt;&gt; that seems like such a hack. Feels like I'm doing something wrong if I
</i>&gt;<i> &gt;&gt;&gt; need to use a hack to do something standard.
</i>&gt;<i> &gt;&gt;&gt;
</i>&gt;<i> &gt;&gt;&gt; I looked at install(EXPORT which could work, but it seems to include a
</i>&gt;<i> &gt;&gt;&gt; lot more information then is needed. I just want to set a variable
</i>&gt;<i> &gt;&gt;&gt; with the full path to a library.
</i>&gt;<i> &gt;&gt;&gt;
</i>&gt;<i> &gt;&gt;&gt; Ian
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; That's not how *Config.cmake modules work. They're NOT Find*.cmake
</i>&gt;<i> &gt;&gt; modules. You should:
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; - add the targets to an export-set for usage from the build tree:
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt;   export(TARGETS ...
</i>&gt;<i> &gt;&gt;     FILE ${CMAKE_BINARY_DIR}/${PROJECT_NAME}LibraryDepends.cmake)
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; - add the targets to an export-set for installation:
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt;   install(TARGETS ... EXPORT ${CMAKE_PROJECT_NAME}LibraryDepends ...)
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; - export the package for usage from the build tree (enter into some
</i>&gt;<i> &gt;&gt; global registry):
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt;   export(PACKAGE ${PROJECT_NAME})
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; - create a *Config.cmake file for the use from the build tree:
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt;   set(QYOTO_INCLUDE_DIR ${CMAKE_SOURCE_DIR})
</i>&gt;<i> &gt;&gt;   set(QYOTO_LIB_DIR ${CMAKE_BINARY_DIR}/lib)
</i>&gt;<i> &gt;&gt;   set(QYOTO_CMAKE_DIR ${CMAKE_BINARY_DIR})
</i>&gt;<i> &gt;&gt;   configure_file(${CMAKE_PROJECT_NAME}Config.cmake.in
</i>&gt;<i> &gt;&gt;     ${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}Config.cmake @ONLY)
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; - install the export set:
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt;   install(EXPORT ${CMAKE_PROJECT_NAME}LibraryDepends DESTINATION
</i>&gt;<i> &gt;&gt;     share/${CMAKE_PROJECT_NAME}/CMake)
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; - create a *Config.cmake file for the use from the install tree and
</i>&gt;<i> &gt;&gt; install it:
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt;   set(QYOTO_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/include)
</i>&gt;<i> &gt;&gt;   set(QYOTO_LIB_DIR ${CMAKE_INSTALL_PREFIX}/lib)
</i>&gt;<i> &gt;&gt;   set(QYOTO_CMAKE_DIR
</i>&gt;<i> &gt;&gt;     ${CMAKE_INSTALL_PREFIX}/share/${CMAKE_PROJECT_NAME}/CMake)
</i>&gt;<i> &gt;&gt;   configure_file(${CMAKE_PROJECT_NAME}Config.cmake.in
</i>&gt;<i> &gt;&gt;     ${CMAKE_BINARY_DIR}/InstallFiles/${CMAKE_PROJECT_NAME}Config.cmake
</i>&gt;<i> &gt;&gt;     @ONLY)
</i>&gt;<i> &gt;&gt;   install(FILES
</i>&gt;<i> &gt;&gt;     ${CMAKE_BINARY_DIR}/InstallFiles/${CMAKE_PROJECT_NAME}Config.cmake
</i>&gt;<i> &gt;&gt;     DESTINATION share/${CMAKE_PROJECT_NAME}/CMake)
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; - The *Config.cmake.in could look like this:
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; #######################################################################
</i>&gt;<i> &gt;&gt; # Tell the user project where to find our headers and libraries
</i>&gt;<i> &gt;&gt; set(QYOTO_INCLUDE_DIR "@QYOTO_INCLUDE_DIR@")
</i>&gt;<i> &gt;&gt; set(QYOTO_INCLUDE_DIRS "${QYOTO_INCLUDE_DIR}")
</i>&gt;<i> &gt;&gt; set(QYOTO_LIBRARY_DIRS "@QYOTO_LIB_DIR@")
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; # Our library dependencies (contains definitions for IMPORTED targets)
</i>&gt;<i> &gt;&gt; include("@QYOTO_CMAKE_DIR@/@<a href="http://www.cmake.org/mailman/listinfo/cmake">PROJECT_NAME at LibraryDepends.cmake</a>")
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; # Defines (if required)
</i>&gt;<i> &gt;&gt; set(QYOTO_DEFINITIONS "@QYOTO_COMPILE_DEFINITIONS@")
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; # USE file (if you have one)
</i>&gt;<i> &gt;&gt; set(QYOTO_USE_FILE
</i>&gt;<i> &gt;&gt;   "@QYOTO_CMAKE_DIR@/@<a href="http://www.cmake.org/mailman/listinfo/cmake">PROJECT_NAME at Use.cmake</a>"
</i>&gt;<i> &gt;&gt;   )
</i>&gt;<i> &gt;&gt; #######################################################################
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; As you can see, the QYOTO_INCLUDE_DIR, QYOTO_LIB_DIR and QYOTO_CMAKE_DIR
</i>&gt;<i> &gt;&gt; values will differ between build and install tree, which is why you
</i>&gt;<i> &gt;&gt; should configure it twice, once for installation and once for the use
</i>&gt;<i> &gt;&gt; from the build tree.
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt; - If you want to get fancy, you can also provide a *ConfigVersion.cmake
</i>&gt;<i> &gt;&gt; file. This file should set the following variables, depending on the
</i>&gt;<i> &gt;&gt; variables PACKAGE_FIND_NAME, PACKAGE_FIND_VERSION,
</i>&gt;<i> &gt;&gt; PACKAGE_FIND_VERSION_{MAJOR,MINOR,PATCH,TWEAK,COUNT}:
</i>&gt;<i> &gt;&gt;
</i>&gt;<i> &gt;&gt;   - PACKAGE_VERSION (version string)
</i>&gt;<i> &gt;&gt;   - PACKAGE_VERSION_EXACT (TRUE or FALSE)
</i>&gt;<i> &gt;&gt;   - PACKAGE_VERSION_COMPATIBLE (TRUE or FALSE)
</i>&gt;<i> &gt;&gt;   - PACKAGE_VERSION_UNSUITABLE (TRUE or FALSE)
</i>&gt;<i> &gt;
</i>&gt;<i> &gt; Wow, good summary.
</i>&gt;<i> &gt;
</i>&gt;<i> &gt; Can you please put that in a wiki page on <a href="http://www.cmake.org/Wiki/CMake">http://www.cmake.org/Wiki/CMake</a>
</i>&gt;<i> &gt; ?
</i>&gt;<i> &gt;
</i>&gt;<i> &gt; Thanks :-)
</i>&gt;<i> &gt; Alex
</i>&gt;<i>
</i>&gt;<i> <a href="http://www.cmake.org/Wiki/CMake:How_to_create_a_ProjectConfig.cmake_file">http://www.cmake.org/Wiki/CMake:How_to_create_a_ProjectConfig.cmake_file</a>
</i>&gt;<i>
</i>&gt;<i> What do you think? Text is pretty terse, but the code should cover it...
</i>
Great :-)
I would move the link to the page to a a bit up on the main page, so it's 
easier to find.
Maybe that overview page needs some shuffling around again.

Alex
</pre>

























































<!--endarticle-->
    <hr>
    <p></p><ul>
        <!--threads-->
	<li>Previous message: <a href="http://www.cmake.org/pipermail/cmake/2011-January/042190.html">[CMake] How to make a ProjectConfig.cmake
</a></li>
	<li>Next message: <a href="http://www.cmake.org/pipermail/cmake/2011-January/042204.html">[CMake] How to make a ProjectConfig.cmake
</a></li>
         <li> <b>Messages sorted by:</b> 
              <a href="http://www.cmake.org/pipermail/cmake/2011-January/date.html#42193">[ date ]</a>
              <a href="http://www.cmake.org/pipermail/cmake/2011-January/thread.html#42193">[ thread ]</a>
              <a href="http://www.cmake.org/pipermail/cmake/2011-January/subject.html#42193">[ subject ]</a>
              <a href="http://www.cmake.org/pipermail/cmake/2011-January/author.html#42193">[ author ]</a>
         </li>
       </ul>

<hr>
<a href="http://www.cmake.org/mailman/listinfo/cmake">More information about the CMake
mailing list</a><br>

</body></html>